{"version":3,"file":"table-http-example.js","sourceRoot":"","sources":["../../../../../src/material-examples/table-http/table-http-example.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, AfterViewInit, ViewChild} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {catchError} from 'rxjs/operators/catchError';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\n\n/**\n * @title Table retrieving data through HTTP\n */\n@Component({\n  selector: 'table-http-example',\n  styleUrls: ['table-http-example.css'],\n  templateUrl: 'table-http-example.html',\n})\nexport class TableHttpExample implements AfterViewInit {\n  displayedColumns = ['created', 'state', 'number', 'title'];\n  exampleDatabase: ExampleHttpDao | null;\n  dataSource = new MatTableDataSource();\n\n  resultsLength = 0;\n  isLoadingResults = false;\n  isRateLimitReached = false;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private http: HttpClient) {}\n\n  ngAfterViewInit() {\n    this.exampleDatabase = new ExampleHttpDao(this.http);\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.exampleDatabase!.getRepoIssues(\n            this.sort.active, this.sort.direction, this.paginator.pageIndex);\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.isRateLimitReached = false;\n          this.resultsLength = data.total_count;\n\n          return data.items;\n        }),\n        catchError(() => {\n          this.isLoadingResults = false;\n          // Catch if the GitHub API has reached its rate limit. Return empty data.\n          this.isRateLimitReached = true;\n          return observableOf([]);\n        })\n      ).subscribe(data => this.dataSource.data = data);\n  }\n}\n\nexport interface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\nexport interface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n\n/** An example database that the data source uses to retrieve data for the table. */\nexport class ExampleHttpDao {\n  constructor(private http: HttpClient) {}\n\n  getRepoIssues(sort: string, order: string, page: number): Observable<GithubApi> {\n    const href = 'https://api.github.com/search/issues';\n    const requestUrl =\n        `${href}?q=repo:angular/material2&sort=${sort}&order=${order}&page=${page + 1}`;\n\n    return this.http.get<GithubApi>(requestUrl);\n  }\n}\n"]}