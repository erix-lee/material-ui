{"version":3,"file":"cdk-table-basic-example.js","sourceRoot":"","sources":["../../../../../src/material-examples/cdk-table-basic/cdk-table-basic-example.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\n/**\n * @title Basic CDK data-table\n */\n@Component({\n  selector: 'cdk-table-basic-example',\n  styleUrls: ['cdk-table-basic-example.css'],\n  templateUrl: 'cdk-table-basic-example.html',\n})\nexport class CdkTableBasicExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n  ngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase);\n  }\n}\n\n/** Constants used to fill up our data base. */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n\n/** An example database that the data source uses to retrieve data for the table. */\nexport class ExampleDatabase {\n  /** Stream that emits whenever the data has been modified. */\n  dataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n  get data(): UserData[] { return this.dataChange.value; }\n\n  constructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n\n  /** Adds a new user to the database. */\n  addUser() {\n    const copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n\n  /** Builds and returns a new User. */\n  private createNewUser() {\n    const name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n  constructor(private _exampleDatabase: ExampleDatabase) {\n    super();\n  }\n\n  /** Connect function called by the table to retrieve one stream containing the data to render. */\n  connect(): Observable<UserData[]> {\n    return this._exampleDatabase.dataChange;\n  }\n\n  disconnect() {}\n}\n"]}