{"version":3,"file":"autocomplete-display-example.js","sourceRoot":"","sources":["../../../../../src/material-examples/autocomplete-display/autocomplete-display-example.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAC,SAAS,EAAC,sBAAsB;AACxC,OAAO,EAAC,WAAW,EAAC,uBAAuB;AAE3C,OAAO,EAAC,SAAS,EAAC,iCAAiC;AACnD,OAAO,EAAC,GAAG,EAAC,2BAA2B;AAEvC,IAAA;IACE,cAAmB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;KAAK;eAPtC;IAQC,CAAA;AAFD,gBAEC;;;;;;;;;;yBAYa,IAAI,WAAW,EAAE;uBAEnB;YACR,IAAI,IAAI,CAAC,MAAM,CAAC;YAChB,IAAI,IAAI,CAAC,SAAS,CAAC;YACnB,IAAI,IAAI,CAAC,MAAM,CAAC;SACjB;;;;;IAID,6CAAQ;;;IAAR;QAAA,iBAOC;QANC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY;aAC/C,IAAI,CACH,SAAS,mBAAC,EAAU,EAAC,EACrB,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAnD,CAAmD,CAAC,EAChE,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAA/C,CAA+C,CAAC,CAC7D,CAAC;KACL;;;;;IAED,2CAAM;;;;IAAN,UAAO,IAAY;QACjB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;YAC/B,OAAA,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC;QAA3D,CAA2D,CAAC,CAAC;KAChE;;;;;IAED,8CAAS;;;;IAAT,UAAU,IAAU;QAClB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;KAChC;;gBAjCF,SAAS,SAAC;oBACT,QAAQ,EAAE,8BAA8B;oBACxC,WAAW,EAAE,mCAAmC;oBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;iBAChD;;;;qCAjBD;;SAkBa,0BAA0B","sourcesContent":["import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {map} from 'rxjs/operators/map';\n\nexport class User {\n  constructor(public name: string) { }\n}\n\n/**\n * @title Display value autocomplete\n */\n@Component({\n  selector: 'autocomplete-display-example',\n  templateUrl: 'autocomplete-display-example.html',\n  styleUrls: ['autocomplete-display-example.css']\n})\nexport class AutocompleteDisplayExample {\n\n  myControl = new FormControl();\n\n  options = [\n    new User('Mary'),\n    new User('Shelley'),\n    new User('Igor')\n  ];\n\n  filteredOptions: Observable<User[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges\n      .pipe(\n        startWith({} as User),\n        map(user => user && typeof user === 'object' ? user.name : user),\n        map(name => name ? this.filter(name) : this.options.slice())\n      );\n  }\n\n  filter(name: string): User[] {\n    return this.options.filter(option =>\n      option.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\n  }\n\n  displayFn(user: User): string {\n    return user ? user.name : user;\n  }\n\n}\n"]}